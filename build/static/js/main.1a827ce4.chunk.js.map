{"version":3,"sources":["stores/AppStore.js","stores/UserStore.js","stores/index.js","components/Wordcloud/Wordcloud.js","pages/HomePage.js","utils/getFrequency.js","App.js","serviceWorker.js","index.js"],"names":["AppStore","persist","observable","UserStore","email","name","stores","appStore","userStore","React","createContext","Wordcloud","memo","props","getCallback","callbackName","word","event","isActive","element","target","setAttribute","className","words","options","rotations","rotationAngles","callbacks","onWordClick","onWordMouseOut","onWordMouseOver","HomePage","observer","store","useLocalStore","text","value","setWords","textAreaWords","setTextAreaWords","makeWordcloud","textObject","string","textArray","splitResult","trim","split","reduce","total","Object","getOwnPropertyNames","forEach","key","index","push","getFrequency","onChange","e","onClick","browserHistory","createBrowserHistory","hydrate","create","App","storeLoaded","setStoreLoaded","load","useEffect","a","then","history","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8ZAGqBA,G,4GAClBC,UAASC,c,wEAAqB,M,GCDZC,G,EAElBF,kBAAQ,U,sMADRA,UAASC,c,wEAAyB,M,2CACfA,c,wEAAyB,CAC3CE,MAAO,GACPC,KAAM,O,6CAEPJ,UAASC,c,yEAA6B,K,GCL5BI,EAAS,CACpBC,SAAU,IAAIP,EACdQ,UAAW,IAAIL,G,GAGYM,IAAMC,cAAN,eACxBJ,I,OCmBUK,G,kBAzBGF,IAAMG,MAAK,SAACC,GAC5B,IAAMC,EAAc,SAAAC,GAAY,OAAI,SAACC,EAAMC,GACzC,IAAMC,EAA4B,mBAAjBH,EACXI,EAAUF,EAAMG,OACtBD,EAAQE,aAAa,aAAc,SACnCF,EAAQE,aAAa,YAAaH,EAAW,OAAS,QACtDC,EAAQE,aAAa,kBAAmBH,EAAW,YAAc,UAEnE,OACE,yBAAKI,UAAW,uBACd,kBAAC,IAAD,CAAgBC,MAAOV,EAAMU,MAC3BC,QAAS,CACPC,UAAW,EACXC,eAAgB,CAAC,EAAG,KAEtBC,UAAW,CACTC,YAAad,EAAY,eACzBe,eAAgBf,EAAY,kBAC5BgB,gBAAiBhB,EAAY,2BCkBxBiB,G,MA9BEC,aAAS,WACxB,IAAMC,EAAQC,aAAc,iBAAO,CACjCX,MAAO,CAAC,CACNY,KAAM,SACNC,MAAO,KAETC,SAAU,SAACF,GAAD,OAAUF,EAAMV,MAAQY,GAClCG,cAAe,GACfC,iBAAkB,SAACJ,GAAD,OAAUF,EAAMK,cAAgBH,OAO9CK,EAAgB,WACpB,IAAMC,EC1BkB,SAACC,GAC3B,IAAMC,EAAY,GACZC,EAAcF,EAAOG,OAAOC,MAAM,OAAOC,QAAO,SAACC,EAAOhC,GAM5D,OALGgC,EAAMhC,GACPgC,EAAMhC,KAENgC,EAAMhC,GAAQ,EAETgC,IACN,IAOH,OANAC,OAAOC,oBAAoBN,GAAaO,SAAQ,SAACC,EAAKC,GACpDV,EAAUW,KAAK,CACbnB,KAAMiB,EACNhB,MAAOQ,EAAYQ,QAGhBT,EDUcY,CAAatB,EAAMK,eACtCL,EAAMI,SAASI,IAGjB,OACE,yBAAKnB,UAAW,YACd,0CACA,kBAAC,EAAD,CAAWC,MAAOU,EAAMV,QACxB,8BAAUa,MAAOH,EAAMK,cAAekB,SAbvB,SAACC,GAAO,IACjBrB,EAAUqB,EAAErC,OAAZgB,MACRH,EAAMM,iBAAiBH,MAYrB,4BAAQsB,QAAS,kBAAMlB,MAAvB,mBE1BAmB,EAAiBC,cACjBC,EAAUC,mBA8BDC,EA5BH/B,aAAS,WACnB,IAAMC,EAAQC,aAAc,iBAAO,CACjC8B,aAAa,EACbC,eAAgB,SAACC,GAAD,OAAWjC,EAAM+B,YAAcE,OAYjD,OATAzD,IAAM0D,WAAU,YACJ,uCAAG,sBAAAC,EAAA,sEACLP,EAAQ,YAAavD,EAAOE,WAAW6D,MAAK,WAChDpC,EAAMgC,gBAAe,MAFZ,2CAAH,qDAKVC,KACC,IAGD,kBAAC,IAAa5D,EACZ,kBAAC,IAAD,CAAQgE,QAASX,GACd1B,EAAM+B,YACL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAM,IAAKC,UAAW1C,KAEnC,UCtBQ2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a827ce4.chunk.js","sourcesContent":["import { action, observable } from 'mobx'\nimport { persist } from 'mobx-persist'\n\nexport default class AppStore {\n  @persist @observable appInfo = {}\n}\n","import { action, observable } from 'mobx'\nimport { persist } from 'mobx-persist'\n\nexport default class UserStore {\n  @persist @observable session_key = ''\n  @persist('object') @observable currentUser = {\n    email: '',\n    name: '',\n  }\n  @persist @observable isAuthenticated = false\n}\n","import React from 'react'\nimport AppStore from './AppStore'\nimport UserStore from './UserStore'\n\nexport const stores = {\n  appStore: new AppStore(),\n  userStore: new UserStore(),\n}\n\nexport const storesContext = React.createContext({\n  ...stores,\n})\n\nexport const useStores = () => {\n  const store = React.useContext(storesContext)\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider')\n  }\n  return store\n}\n","import React from 'react'\nimport ReactWordcloud from 'react-wordcloud'\nimport './wordcloud.scss'\n\nconst Wordcloud = React.memo((props) => {\n  const getCallback = callbackName => (word, event) => {\n    const isActive = callbackName !== 'onWordMouseOut'\n    const element = event.target\n    element.setAttribute('background', 'white')\n    element.setAttribute('font-size', isActive ? '300%' : '100%')\n    element.setAttribute('text-decoration', isActive ? 'underline' : 'none')\n  }\n  return (\n    <div className={'wordcloud-container'}>\n      <ReactWordcloud words={props.words}\n        options={{\n          rotations: 3,\n          rotationAngles: [0, 90],\n        }}\n        callbacks={{\n          onWordClick: getCallback('onWordClick'),\n          onWordMouseOut: getCallback('onWordMouseOut'),\n          onWordMouseOver: getCallback('onWordMouseOver'),\n        }}\n      />\n    </div>\n  )\n})\n\nexport default Wordcloud\n","import React from 'react'\nimport ReactWordcloud from 'react-wordcloud';\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/animations/scale.css';\nimport { Link, useHistory } from 'react-router-dom'\nimport { observer, useLocalStore } from 'mobx-react'\nimport { getFrequency } from 'src/utils/getFrequency'\nimport Wordcloud from 'src/components/Wordcloud/Wordcloud'\nimport './homePage.scss'\n\nconst HomePage = observer(() => {\n  const store = useLocalStore(() => ({\n    words: [{\n      text: 'SAMPLE',\n      value: 10\n    }],\n    setWords: (text) => store.words = text,\n    textAreaWords: '',\n    setTextAreaWords: (text) => store.textAreaWords = text\n  }))\n  \n  const changeText = (e) => {\n    const { value } = e.target\n    store.setTextAreaWords(value)\n  }\n  const makeWordcloud = () => {\n    const textObject = getFrequency(store.textAreaWords)\n    store.setWords(textObject)\n  }\n\n  return (\n    <div className={'homePage'}>\n      <h1>Word Cloud</h1>\n      <Wordcloud words={store.words}/>\n      <textarea value={store.textAreaWords} onChange={changeText} />\n      <button onClick={() => makeWordcloud()}>GENERATE !</button>\n    </div>\n  )\n})\n\nexport default HomePage\n","export const getFrequency = (string) => {\n  const textArray = []\n  const splitResult = string.trim().split(/\\s+/).reduce((total, word) => {\n    if(total[word]) {\n      total[word] ++\n    } else {\n      total[word] = 1\n    }\n    return total\n  }, {})\n  Object.getOwnPropertyNames(splitResult).forEach((key, index) => {\n    textArray.push({\n      text: key,\n      value: splitResult[key]\n    })\n  })\n  return textArray\n}\nexport const getFrequency2 = (string, cutOff) => {\n  let cleanString = string.replace(/[\\.,-\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\"),\n    words = cleanString.split(' '),\n    frequencies = {},\n    word, frequency, i;\n  for( i=0; i<words.length; i++ ) {\n    word = words[i];\n    frequencies[word] = frequencies[word] || 0;\n    frequencies[word]++;\n  }\n  words = Object.keys( frequencies );\n  return words.sort(function (a,b) { return frequencies[b] -frequencies[a];}).slice(0,cutOff).toString();\n}\n","import React from 'react'\nimport { create } from 'mobx-persist'\nimport { Provider, observer, useLocalStore } from 'mobx-react'\nimport { Router, Route, Switch } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport { stores } from 'stores'\n\nimport HomePage from './pages/HomePage'\n\nconst browserHistory = createBrowserHistory()\nconst hydrate = create()\n\nconst App = observer(() => {\n  const store = useLocalStore(() => ({\n    storeLoaded: false,\n    setStoreLoaded: (load) => (store.storeLoaded = load),\n  }))\n\n  React.useEffect(() => {\n    const load = async () => {\n      await hydrate('userStore', stores.userStore).then(() => {\n        store.setStoreLoaded(true)\n      })\n    }\n    load()\n  }, [])\n\n  return (\n    <Provider {...stores}>\n      <Router history={browserHistory}>\n        {store.storeLoaded ? (\n          <Switch>\n            <Route exact path={'/'} component={HomePage} />\n          </Switch>\n        ) : null}\n      </Router>\n    </Provider>\n  )\n})\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'mobx-react-lite/batchingForReactDom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}