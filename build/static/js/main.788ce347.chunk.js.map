{"version":3,"sources":["assets/images/logo.png","stores/AppStore.js","stores/UserStore.js","stores/index.js","components/Wordcloud/Wordcloud.js","components/Wordcloud/Controllers.js","pages/HomePage.js","utils/getFrequency.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppStore","persist","observable","width","height","minFont","maxFont","spiral","fontFamily","action","key","value","options","ref","cloudRef","UserStore","email","name","stores","appStore","userStore","storesContext","React","createContext","useStores","store","useContext","Error","Wordcloud","memo","observer","props","words","maxWords","setCloudRef","getCallback","callbackName","word","event","isActive","element","target","setAttribute","useRef","current","firstChild","className","id","size","rotations","rotationAngles","fontSizes","callbacks","onWordClick","onWordMouseOut","onWordMouseOver","style","display","justifyContent","alignItems","StyledSlider","styled","StyledSelect","Controllers","changeOptions","marginRight","min","max","step","onChange","border","marginLeft","defaultValue","textAlign","Option","placeholder","e","suffix","HomePage","useLocalStore","text","setWords","textAreaWords","setTextAreaWords","wordcloudOptions","setOptions","makeWordcloud","textObject","string","textArray","splitResult","trim","split","reduce","total","Object","getOwnPropertyNames","forEach","index","push","getFrequency","toJS","src","logo","alt","onClick","domToImage","toBlob","then","blob","saveAs","catch","error","console","type","browserHistory","createBrowserHistory","hydrate","create","App","storeLoaded","setStoreLoaded","load","useEffect","a","history","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.788ce347.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f29a262a.png\";","import { action, observable } from 'mobx'\nimport { persist } from 'mobx-persist'\n\nexport default class AppStore {\n  @persist @observable appInfo = {}\n  @observable options = {\n    width: 600,\n    height: 300,\n    minFont: 12,\n    maxFont: 24,\n    spiral: 'archimedean',\n    fontFamily: 'Arial'\n  }\n  @observable cloudRef\n  \n  @action\n  changeOptions = (key, value) => {\n    this.options[key] = value\n  }\n  \n  @action\n  setCloudRef = (ref) => {\n    this.cloudRef = ref\n  }\n}\n","import { action, observable } from 'mobx'\nimport { persist } from 'mobx-persist'\n\nexport default class UserStore {\n  @persist @observable session_key = ''\n  @persist('object') @observable currentUser = {\n    email: '',\n    name: '',\n  }\n  @persist @observable isAuthenticated = false\n}\n","import React from 'react'\nimport AppStore from './AppStore'\nimport UserStore from './UserStore'\n\nexport const stores = {\n  appStore: new AppStore(),\n  userStore: new UserStore(),\n}\n\nexport const storesContext = React.createContext({\n  ...stores,\n})\n\nexport const useStores = () => {\n  const store = React.useContext(storesContext)\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider')\n  }\n  return store\n}\n","import React, { useRef } from 'react'\nimport { observer } from 'mobx-react'\nimport ReactWordcloud from 'react-wordcloud'\nimport { useStores } from 'src/stores'\nimport './wordcloud.scss'\n\nconst Wordcloud = React.memo(observer((props) => {\n  const { words, options } = props\n  const { width, height, maxWords, minFont, maxFont, spiral, fontFamily } = options\n  const { appStore: { setCloudRef }} = useStores()\n  \n  const getCallback = callbackName => (word, event) => {\n    const isActive = callbackName !== 'onWordMouseOut'\n    const element = event.target\n    element.setAttribute('background', 'white')\n    element.setAttribute('font-size', isActive ? '300%' : '100%')\n    element.setAttribute('text-decoration', isActive ? 'underline' : 'none')\n  }\n  const cloudRef = useRef(null)\n  if(cloudRef.current) setCloudRef(cloudRef.current.firstChild)\n  \n  return (\n    <div className={'wordcloud-container'} ref={cloudRef} id={'check'}>\n      <ReactWordcloud\n        words={words}\n        maxWords={maxWords}\n        size={[width, height]}\n        options={{\n          rotations: 3,\n          rotationAngles: [0, 90],\n          fontSizes: [minFont, maxFont],\n          spiral: spiral,\n          fontFamily: fontFamily\n        }}\n        callbacks={{\n          onWordClick: getCallback('onWordClick'),\n          onWordMouseOut: getCallback('onWordMouseOut'),\n          onWordMouseOver: getCallback('onWordMouseOver'),\n        }}\n        style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}\n      />\n    </div>\n  )\n}))\n\nexport default Wordcloud\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Slider, InputNumber, Input, Select } from 'antd'\nimport styled from 'styled-components'\nimport { useStores } from 'src/stores'\nimport './controllers.scss'\n\nconst StyledSlider = styled(Slider)`\n  width: 65%;\n  .ant-slider-rail {\n    height: 8px;\n  }\n   &:hover {\n    .ant-slider-track {\n      background: #a03eff;\n    }\n  }\n  .ant-slider-track {\n    background: #a03eff;\n    height: 8px;\n  }\n  .ant-slider-handle {\n    border: solid 3px #a03eff;\n    height: 20px;\n    width: 20px;\n  }\n`\n\nconst StyledSelect = styled(Select)`\n  width: 176px;\n  .ant-select-selector {\n    height: 36px !important;\n    \n    .ant-select-selection-item {\n      line-height: 33px;\n    }\n  }\n`\n\nconst Controllers = observer(() => {\n  const { appStore } = useStores()\n  const { options, changeOptions } = appStore\n  const { width, height, maxWords, minFont, maxFont } = options\n  \n  return (\n    <div className={'wordcloud-controller'}>\n      <div className={'wordcloud-controller__row'}>\n        <div className={'wordcloud-controller__row-width'} style={{marginRight: 20}}>\n          <p>넓이</p>\n          <StyledSlider\n            min={300}\n            max={1000}\n            step={10}\n            onChange={(value) => changeOptions('width', value)}\n            value={typeof width === 'number' ? width : 0}\n          />\n          <InputNumber\n            min={300}\n            max={1000}\n            style={{ border: '2px solid #cccccc', width: 80 }}\n            value={width}\n            onChange={(value) => changeOptions('width', value)}\n          />\n        </div>\n        <div className={'wordcloud-controller__row-height'} style={{marginLeft: 20}}>\n          <p>높이</p>\n          <StyledSlider\n            min={300}\n            max={550}\n            step={10}\n            onChange={(value) => changeOptions('height', value)}\n            value={typeof height === 'number' ? height : 0}\n          />\n          <InputNumber\n            min={300}\n            max={550}\n            style={{ border: '2px solid #cccccc', width: 80 }}\n            value={height}\n            onChange={(value) => changeOptions('height', value)}\n          />\n        </div>\n         <div className={'wordcloud-controller__row-spiral'}>\n          <p>모양</p>\n          <StyledSelect defaultValue={'archimedean'} onChange={value => changeOptions('spiral', value)} style={{height: 36, width: 150, textAlign: 'left'}}>\n            <Select.Option value={'archimedean'}>아르키메데스형</Select.Option>\n            <Select.Option value={'rectangular'}>직사각형</Select.Option>\n          </StyledSelect>\n        </div>\n      </div>\n      <div className={'wordcloud-controller__row'}>\n        <div className={'wordcloud-controller__row-maxWords'}>\n          <p>최대 글자수</p>\n          <Input placeholder=\"30\" value={maxWords} onChange={(e) => {changeOptions('maxWords', e.target.value)}} style={{width: 80, border: '2px solid #cccccc'}}/>\n          <em>(200개 이상으로 입력하시면<br/>활성화가 어려울 수 있습니다. )</em>\n        </div>\n        <div className={'wordcloud-controller__row-fontSize'}>\n          <p>최소 글자크기</p>\n          <Input placeholder=\"10\" value={minFont} suffix={'px'} onChange={(e) => {changeOptions('minFont', e.target.value)}} style={{width: 100, marginRight: 20, border: '2px solid #cccccc'}}/>\n          <p>최대 글자크기</p>\n          <Input placeholder=\"30\" value={maxFont} suffix={'px'} onChange={(e) => {changeOptions('maxFont', e.target.value)}} style={{width: 100, border: '2px solid #cccccc'}}/>\n        </div>\n        <div className={'wordcloud-controller__row-fontFamily'}>\n          <p>폰트</p>\n          <StyledSelect defaultValue={'Arial'} onChange={value => changeOptions('fontFamily', value)} style={{height: 36, width: 150, textAlign: 'left'}}>\n            <Select.Option value={'Arial'}>Arial</Select.Option>\n            <Select.Option value={'Times New Roman'}>Times New Roman</Select.Option>\n            <Select.Option value={'Helvetica'}>Helvetica</Select.Option>\n            <Select.Option value={'Times'}>Times</Select.Option>\n            <Select.Option value={'Courier New'}>Courier New</Select.Option>\n            <Select.Option value={'Verdana'}>Verdana</Select.Option>\n            <Select.Option value={'Courier'}>Courier</Select.Option>\n            <Select.Option value={'Arial Narrow'}>Arial Narrow</Select.Option>\n            <Select.Option value={'Candara'}>Candara</Select.Option>\n            <Select.Option value={'Geneva'}>Geneva</Select.Option>\n            <Select.Option value={'Calibri'}>Calibri</Select.Option>\n            <Select.Option value={'Cambria'}>Cambria</Select.Option>\n            <Select.Option value={'Garamond'}>Garamond</Select.Option>\n            <Select.Option value={'Perpetua'}>Perpetua</Select.Option>\n            <Select.Option value={'Monaco'}>Monaco</Select.Option>\n            <Select.Option value={'Didot'}>Didot</Select.Option>\n            <Select.Option value={'Brush Script MT'}>Brush Script MT</Select.Option>\n            <Select.Option value={'Lucida Bright'}>Lucida Bright</Select.Option>\n            <Select.Option value={'Copperplate'}>Copperplate</Select.Option>\n          </StyledSelect>\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default Controllers\n","import React from 'react'\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/animations/scale.css';\nimport { toJS } from 'mobx'\nimport { observer, useLocalStore } from 'mobx-react'\nimport { Button } from 'antd'\nimport domToImage from 'dom-to-image'\nimport { saveAs } from 'file-saver'\nimport { useStores } from 'src/stores'\nimport { getFrequency } from 'src/utils/getFrequency'\nimport Wordcloud from 'src/components/Wordcloud/Wordcloud'\nimport Controllers from 'src/components/Wordcloud/Controllers'\nimport logo from 'assets/images/logo.png'\nimport './homePage.scss'\n\nconst HomePage = observer(() => {\n  const store = useLocalStore(() => ({\n    words: [{\n      text: 'SAMPLE',\n      value: 10\n    }],\n    setWords: (text) => store.words = text,\n    textAreaWords: '',\n    setTextAreaWords: (text) => store.textAreaWords = text,\n    wordcloudOptions: {\n      width: 600,\n      height: 300,\n      minFont: 12,\n      maxFont: 24,\n      spiral: 'archimedean'\n    },\n    setOptions: (options) => store.wordcloudOptions = options\n  }))\n  const { words, setWords, textAreaWords, setTextAreaWords, wordcloudOptions, setOptions } = store\n  const { appStore: { options, cloudRef } } = useStores()\n  \n  const changeText = (e) => {\n    const { value } = e.target\n    setTextAreaWords(value)\n  }\n  const makeWordcloud = () => {\n    const textObject = getFrequency(textAreaWords)\n    setWords(textObject)\n    setOptions(toJS(options))\n  }\n  const download = () => {\n    domToImage.toBlob(cloudRef, {} )\n              .then((blob) => {\n                saveAs(blob, 'wordcloud.png')\n              })\n              .catch((error) => {\n                console.error('oops, something went wrong!', error)\n              })\n  }\n\n  return (\n    <div className={'homePage'}>\n      <img className={'logo'} src={logo} alt={'logo'} />\n      <Wordcloud words={words} options={wordcloudOptions}/>\n      <Controllers />\n      <div className={'textarea-container'}>\n        <textarea value={textAreaWords} onChange={changeText} placeholder={'분석하려는 텍스트를 넣어주세요'}/>\n        <div className={'button-container'}>\n          <Button onClick={() => makeWordcloud()}>GENERATE !</Button>\n          <Button onClick={() => download()} type={'primary'}>Download PNG !</Button>\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default HomePage\n","export const getFrequency = (string) => {\n  const textArray = []\n  const splitResult = string.trim().split(/\\s+/).reduce((total, word) => {\n    if(total[word]) {\n      total[word] ++\n    } else {\n      total[word] = 1\n    }\n    return total\n  }, {})\n  Object.getOwnPropertyNames(splitResult).forEach((key, index) => {\n    textArray.push({\n      text: key,\n      value: splitResult[key]\n    })\n  })\n  return textArray\n}\nexport const getFrequency2 = (string, cutOff) => {\n  let cleanString = string.replace(/[\\.,-\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\"),\n    words = cleanString.split(' '),\n    frequencies = {},\n    word, frequency, i;\n  for( i=0; i<words.length; i++ ) {\n    word = words[i];\n    frequencies[word] = frequencies[word] || 0;\n    frequencies[word]++;\n  }\n  words = Object.keys( frequencies );\n  return words.sort(function (a,b) { return frequencies[b] -frequencies[a];}).slice(0,cutOff).toString();\n}\n","import React from 'react'\nimport { create } from 'mobx-persist'\nimport { Provider, observer, useLocalStore } from 'mobx-react'\nimport { Router, Route, Switch } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport { stores } from 'stores'\n\nimport HomePage from './pages/HomePage'\n\nconst browserHistory = createBrowserHistory()\nconst hydrate = create()\n\nconst App = observer(() => {\n  const store = useLocalStore(() => ({\n    storeLoaded: false,\n    setStoreLoaded: (load) => (store.storeLoaded = load),\n  }))\n\n  React.useEffect(() => {\n    const load = async () => {\n      await hydrate('userStore', stores.userStore).then(() => {\n        store.setStoreLoaded(true)\n      })\n    }\n    load()\n  }, [])\n\n  return (\n    <Provider {...stores}>\n      <Router history={browserHistory}>\n        {store.storeLoaded ? (\n          <Switch>\n            <Route exact path={'/'} component={HomePage} />\n          </Switch>\n        ) : null}\n      </Router>\n    </Provider>\n  )\n})\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'mobx-react-lite/batchingForReactDom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}